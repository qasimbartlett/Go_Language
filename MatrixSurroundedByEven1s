/*

Given a matrix of order nxm, composed of only 0's and 1's, find the number of 1's in the matrix that are surrounded by an even number (>0) of 0's. The surrounding of a cell in the matrix is defined as the elements above, below, on left, on right as well as the 4 diagonal elements around the cell of the matrix. Hence, the surrounding of any matrix elements is composed of 8 elements. Find the number of such 1's.

Assumptions
    How big is the matrix?
		Assume a 2d matrix
		Only valid inputs provided
		Wrap around matrix 

Algorithm
  result = 0 
  for i in max rows
	  for j in max columns
		  result  += SurroundedByEven0s(i, j)
  return result

	SurroundedByEven0s(i, j)
	  if i < 0   i=max_rows
		if i > max_rows    i=0
		if j < 0    j=max_col
		if j > max_col    j = 0
		count_surrounding_0s :=0 ..... 



Test vectors
  1. Empty matrix
	2. very large matrix (eg: 1 billion rows and 1 billion columns)

Complexity
*/



package main

import . "fmt"


func Value(i, j, max_r, max_c int, m [][]int) int {
	// Println("Value ", i, j, max_r, max_c)
	if i < 0 { 
    i = max_r-1
  } else if i >= max_c {
    i = 0
  } 
  if j < 0 {
    j = max_c-1
  } else if j >= max_c {
    j = 0
  }
	// Println(i, j, max_r, max_c)
	// Println()
	// return 1
	return m[i][j]

}


func SurroundedByEven0s(i, j, max_r, max_c int, m [][]int) int {
  count_surrounding_0s := 0
  // Println(i, j, max_r, max_c)

	// left
	count_surrounding_0s += Value(i, j-1,max_r, max_c, m)
	// right
  count_surrounding_0s += Value(i, j+1,max_r, max_c, m)
	// Top
	count_surrounding_0s += Value(i-1, j, max_r, max_c, m)

  // Bottom
  count_surrounding_0s += Value(i+1, j, max_r, max_c, m)
	// north-east diagonal
  count_surrounding_0s += Value(i-1, j+1, max_r, max_c, m)
	// north west diagonal
  count_surrounding_0s += Value(i-1, j-1, max_r, max_c, m)
  // south-east diagonal
  count_surrounding_0s += Value(i+1, j+1, max_r, max_c, m)
  // south west diagonal
  count_surrounding_0s += Value(i+1, j-1, max_r, max_c, m)

	if count_surrounding_0s % 2 == 0 {
		Println("Surrounded by Even 0s seen at ", i, j)
	}




	return 1
}

func main(){
	/*
	m := [][] int {
		{1, 0, 0}, 
		{1, 1, 0}, 
		{0, 1, 0}}
	*/
		m := [][] int {}

			max_rows := len(m)
		max_col := len(m[0])
	// Println("Hellow world ", m, max_rows, max_col)

	// var result int
	result := 0
	for i := 0; i < max_rows; i++ {
		for j := 0; j < max_col; j++ {
			// result = result + SurroundedByEven0s(i, j)
      result += SurroundedByEven0s(i, j, max_rows, max_col, m)
			// Println(result)
		}
	}
	Println("Number of 1 surrounded by even # of 0s is ", result)
}
